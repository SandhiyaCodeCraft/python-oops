import csv


class Item:
    pay_rate = 0.8 # The pay rate after 20% discount
    all = []
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.__name = name--------------------------------------------------private variable
        self.price = price
        self.quantity = quantity

        # Actions to execute
        Item.all.append(self)

    @property,<---------------------------------------------------------------GETTER
    # Property Decorator = Read-Only Attribute
    def name(self):
        return self.__name

    @name.setter<-------------------------------------------------------------SETTER
    def name(self, value):
        if len(value) > 10:
            raise Exception("The name is too long!")
        else:
            self.__name = value

    def calculate_total_price(self):
        return self.price * self.quantity

    def apply_discount(self):
        self.price = self.price * self.pay_rate

    @classmethod
    def instantiate_from_csv(cls):
        with open('items.csv', 'r') as f:
            reader = csv.DictReader(f)
            items = list(reader)

        for item in items:
            Item(
                name=item.get('name'),
                price=float(item.get('price')),
                quantity=int(item.get('quantity')),
            )

    @staticmethod
    def is_integer(num):
        # We will count out the floats that are point zero
        # For i.e: 5.0, 10.0
        if isinstance(num, float):
            # Count out the floats that are point zero
            return num.is_integer()
        elif isinstance(num, int):
            return True
        else:
            return False

    def __repr__(self):
        return f"{self.__class__.__name__}('{self.name}', {self.price}, {self.quantity})"

item1 = Item("MyItem", 750)

# Setting an Attribute
item1.name = "OtherItem"

# Getting an Attribute
print(item1.name)

DESCRIPTION 1:
If you want to set any variable private, we can specify it by using double underscore.( self.__name = name)
And if we try to print it or access it outside the class, we can't get the output because it is private .[print(item1.__name)].So only by using the @property - getter function that is public we can acess it outside the class and that function has the access to that private variable because it is defining inside that class.It return by (self.__name)
And if you want to change the private variable or to modify it, we use the setter method by@variable.We can modify it by passing the value (self.__name="cjjhjgdj") because setter is a public method we can access it outside the class
encapsulation:A capsule (class) that hides the inner medicine (data) and only gives it through controlled methods (getters/setters).
