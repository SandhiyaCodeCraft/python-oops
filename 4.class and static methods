import csv


class Item:
    pay_rate = 0.8 # The pay rate after 20% discount
    all = []
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

        # Actions to execute
        Item.all.append(self)

    def calculate_total_price(self):
        return self.price * self.quantity

    def apply_discount(self):
        self.price = self.price * self.pay_rate
#Takes cls as the first parameter (like how instance methods take self).
Can access and modify class-level data.
Used when the method relates to the class, not a specific object.
Can be used to create or initialize objects (factory methods).
    @classmethod
    def instantiate_from_csv(cls):
        with open('items.csv', 'r') as f:
            reader = csv.DictReader(f)
            items = list(reader)

        for item in items:
            Item(                  <-----------------------------------creating object by class method
                name=item.get('name'),
                price=float(item.get('price')),
                quantity=int(item.get('quantity')),
            )
#A static method does not receive the instance (self) or class (cls) as the first argument.
#No self or cls.
#Can't access or modify class or instance data.
#Used when the method is logically related to the class, but doesn't need to access class or instance.
    @staticmethod<----------------------------------------------------------------------------in this eg:5.0,8,9,8.0are returned true even if float with .0 but 6.8,9.7 are returned false
    def is_integer(num):
        # We will count out the floats that are point zero
        # For i.e: 5.0, 10.0
        if isinstance(num, float):
            # Count out the floats that are point zero.
            return num.is_integer()
        elif isinstance(num, int):
            return True
        else:
            return False

    def __repr__(self):
        return f"Item('{self.name}', {self.price}, {self.quantity})"
